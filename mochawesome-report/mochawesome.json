{
  "stats": {
    "suites": 14,
    "tests": 38,
    "passes": 12,
    "pending": 1,
    "failures": 25,
    "start": "2017-08-18T02:27:08.796Z",
    "end": "2017-08-18T02:27:17.134Z",
    "duration": 8338,
    "testsRegistered": 42,
    "passPercent": 29.3,
    "pendingPercent": 2.4,
    "other": 1,
    "hasOther": true,
    "skipped": 4,
    "hasSkipped": true,
    "passPercentClass": "danger",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Contract: Wallet",
        "suites": [],
        "tests": [
          {
            "title": "should be able to transfer tokens",
            "fullTitle": "Contract: Wallet should be able to transfer tokens",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "async \n    const methodId = web3.sha3('transfer(address,uint256)').slice(0, 10);\n    const recipient = `000000000000000000000000${accounts[2].slice(2)}`;\n    const amount = numberPad(75000);\n    const calldata = `${methodId}${recipient}${amount}`;\n    await wallet.submitTransaction(token.address, 0, calldata);\n    const balance = await token.balanceOf.call(accounts[2]);\n    assert.equals(balance, '75000000000000000000000');",
            "err": {},
            "isRoot": false,
            "uuid": "6f3e616e-1bd1-49df-abb2-4f3ce823d303",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "should be able to create an allowance",
            "fullTitle": "Contract: Wallet should be able to create an allowance",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "async \n    const methodId = web3.sha3('approve(address,uint256)').slice(0, 10);\n    const spender = `000000000000000000000000${accounts[2].slice(2)}`;\n    const amount = numberPad(75000);\n    const calldata = methodId + spender + amount;\n    await wallet.submitTransaction(token.address, 0, calldata);\n    const allowance = await token.allowance.call(wallet.address, accounts[2]);\n    assert.equals(allowance, '75000000000000000000000');\n    await token.transferFrom(\n      wallet.address, accounts[1], web3.toWei(71000), { from: accounts[2] });\n    const balance = await token.balanceOf.call(accounts[1]);\n    assert.equals(balance, '71000000000000000000000');",
            "err": {},
            "isRoot": false,
            "uuid": "ff57ec57-a706-4f6b-9039-5a3f6afba0d2",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "should be able to destroy owned tokens",
            "fullTitle": "Contract: Wallet should be able to destroy owned tokens",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "async \n    const methodId = web3.sha3('burn(uint256)').slice(0, 10);\n    const amount = numberPad(6350);\n    const calldata = methodId + amount;\n    await wallet.submitTransaction(token.address, 0, calldata);\n    const balance = await token.balanceOf(wallet.address);\n    assert.equals(balance, '113650000000000000000000');",
            "err": {},
            "isRoot": false,
            "uuid": "dc66701c-1079-4fed-9105-d0f4ff9a73bd",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "should be able to spend an allowance",
            "fullTitle": "Contract: Wallet should be able to spend an allowance",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "async \n    const methodId = web3.sha3('transferFrom(address,address,uint256)').slice(0, 10);\n    const owner = padAddress(accounts[3]);\n    const recipient = padAddress(accounts[1]);\n    const amount = web3.toWei(6350);\n    const encodedAmount = numberPad(6350);\n    const calldata = methodId + owner + recipient + encodedAmount;\n    await token.approve(wallet.address, amount, { from: accounts[3] });\n    const allowance = await token.allowance.call(accounts[3], wallet.address);\n    assert.equals(allowance, amount);\n    await wallet.submitTransaction(token.address, 0, calldata);\n    const balance = await token.balanceOf.call(accounts[1]);\n    assert.equals(balance, amount);",
            "err": {},
            "isRoot": false,
            "uuid": "66d3d976-e7d1-49ee-a916-630cc2e23ecb",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": false,
            "skipped": true
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 300000,
        "file": "/test/wallet.js",
        "uuid": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Wallet \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 10,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "aa5529e3-a793-4bb2-80e0-9263154e6864",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Wallet \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "65dfa814-cee0-4165-97aa-a7b4cde16a35",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook for \"should be able to transfer tokens\"",
            "fullTitle": "Contract: Wallet \"before each\" hook for \"should be able to transfer tokens\"",
            "timedOut": false,
            "duration": 35,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "async \n    wallet = await Wallet.new(accounts, 1);\n    token = await MoedaToken.new({ from: accounts[1] });\n    await token.create(wallet.address, web3.toWei(120000), { from: accounts[1] });\n    await token.create(accounts[3], web3.toWei(15000), { from: accounts[1] });\n    return token.unlock({ from: accounts[1] });",
            "err": {
              "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
              "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
            },
            "isRoot": false,
            "uuid": "f7d058a7-1475-4271-a0a3-3588573fb60a",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Wallet \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "853577c3-d0c2-4205-b71f-89ebd9a1effc",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/wallet.js",
        "passes": [],
        "failures": [],
        "skipped": [
          {
            "title": "should be able to transfer tokens",
            "fullTitle": "Contract: Wallet should be able to transfer tokens",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "async \n    const methodId = web3.sha3('transfer(address,uint256)').slice(0, 10);\n    const recipient = `000000000000000000000000${accounts[2].slice(2)}`;\n    const amount = numberPad(75000);\n    const calldata = `${methodId}${recipient}${amount}`;\n    await wallet.submitTransaction(token.address, 0, calldata);\n    const balance = await token.balanceOf.call(accounts[2]);\n    assert.equals(balance, '75000000000000000000000');",
            "err": {},
            "isRoot": false,
            "uuid": "6f3e616e-1bd1-49df-abb2-4f3ce823d303",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "should be able to create an allowance",
            "fullTitle": "Contract: Wallet should be able to create an allowance",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "async \n    const methodId = web3.sha3('approve(address,uint256)').slice(0, 10);\n    const spender = `000000000000000000000000${accounts[2].slice(2)}`;\n    const amount = numberPad(75000);\n    const calldata = methodId + spender + amount;\n    await wallet.submitTransaction(token.address, 0, calldata);\n    const allowance = await token.allowance.call(wallet.address, accounts[2]);\n    assert.equals(allowance, '75000000000000000000000');\n    await token.transferFrom(\n      wallet.address, accounts[1], web3.toWei(71000), { from: accounts[2] });\n    const balance = await token.balanceOf.call(accounts[1]);\n    assert.equals(balance, '71000000000000000000000');",
            "err": {},
            "isRoot": false,
            "uuid": "ff57ec57-a706-4f6b-9039-5a3f6afba0d2",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "should be able to destroy owned tokens",
            "fullTitle": "Contract: Wallet should be able to destroy owned tokens",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "async \n    const methodId = web3.sha3('burn(uint256)').slice(0, 10);\n    const amount = numberPad(6350);\n    const calldata = methodId + amount;\n    await wallet.submitTransaction(token.address, 0, calldata);\n    const balance = await token.balanceOf(wallet.address);\n    assert.equals(balance, '113650000000000000000000');",
            "err": {},
            "isRoot": false,
            "uuid": "dc66701c-1079-4fed-9105-d0f4ff9a73bd",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": false,
            "skipped": true
          },
          {
            "title": "should be able to spend an allowance",
            "fullTitle": "Contract: Wallet should be able to spend an allowance",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "async \n    const methodId = web3.sha3('transferFrom(address,address,uint256)').slice(0, 10);\n    const owner = padAddress(accounts[3]);\n    const recipient = padAddress(accounts[1]);\n    const amount = web3.toWei(6350);\n    const encodedAmount = numberPad(6350);\n    const calldata = methodId + owner + recipient + encodedAmount;\n    await token.approve(wallet.address, amount, { from: accounts[3] });\n    const allowance = await token.allowance.call(accounts[3], wallet.address);\n    assert.equals(allowance, amount);\n    await wallet.submitTransaction(token.address, 0, calldata);\n    const balance = await token.balanceOf.call(accounts[1]);\n    assert.equals(balance, amount);",
            "err": {},
            "isRoot": false,
            "uuid": "66d3d976-e7d1-49ee-a916-630cc2e23ecb",
            "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
            "isHook": false,
            "skipped": true
          }
        ],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 4,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 4,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": true,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Contract: MoedaToken",
        "suites": [
          {
            "title": "constructor",
            "suites": [],
            "tests": [
              {
                "title": "should set owner to senders address",
                "fullTitle": "Contract: MoedaToken constructor should set owner to senders address",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const owner = await instance.owner.call();\n      assert.strictEqual(owner, accounts[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "6f78c6dd-183b-4dbf-893e-9f74a0a25fc0",
                "parentUUID": "5f251f48-3222-4307-9c18-483c77f03b16",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set allocations",
                "fullTitle": "Contract: MoedaToken constructor should set allocations",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "edaa71cc-5bc0-40dc-a5fc-a0b291e5427f",
                "parentUUID": "5f251f48-3222-4307-9c18-483c77f03b16",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [
              {
                "title": "should set allocations",
                "fullTitle": "Contract: MoedaToken constructor should set allocations",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": true,
                "code": "",
                "err": {},
                "isRoot": false,
                "uuid": "edaa71cc-5bc0-40dc-a5fc-a0b291e5427f",
                "parentUUID": "5f251f48-3222-4307-9c18-483c77f03b16",
                "isHook": false,
                "skipped": false
              }
            ],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "5f251f48-3222-4307-9c18-483c77f03b16",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [
              {
                "title": "should set owner to senders address",
                "fullTitle": "Contract: MoedaToken constructor should set owner to senders address",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const owner = await instance.owner.call();\n      assert.strictEqual(owner, accounts[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "6f78c6dd-183b-4dbf-893e-9f74a0a25fc0",
                "parentUUID": "5f251f48-3222-4307-9c18-483c77f03b16",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 1,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": true,
            "hasSkipped": false,
            "duration": 5,
            "rootEmpty": false
          },
          {
            "title": "setMigrationagent",
            "suites": [],
            "tests": [
              {
                "title": "should throw if minting is active",
                "fullTitle": "Contract: MoedaToken setMigrationagent should throw if minting is active",
                "timedOut": false,
                "duration": 377,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const token = await MoedaToken.new();\n      return utils.shouldThrowVmException(\n        token.setMigrationAgent.bind(token, agent.address));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "2538d671-30d4-4726-8277-9c8c7c1370a6",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if sender is not owner",
                "fullTitle": "Contract: MoedaToken setMigrationagent should throw if sender is not owner",
                "timedOut": false,
                "duration": 6,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(\n          instance, agent.address, { from: accounts[1] })))",
                "err": {
                  "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "c55bb657-32ef-4944-a0e5-220e2e939265",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if argument is null address",
                "fullTitle": "Contract: MoedaToken setMigrationagent should throw if argument is null address",
                "timedOut": false,
                "duration": 306,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, NULL_ADDRESS)))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "4e4d52ad-8df1-40a1-ac2a-5a7fbafdfc56",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if argument is not a contract",
                "fullTitle": "Contract: MoedaToken setMigrationagent should throw if argument is not a contract",
                "timedOut": false,
                "duration": 336,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, accounts[1])))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "81213c40-b8da-40ea-8d1d-68edef1615b9",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if migrationAgent is already set",
                "fullTitle": "Contract: MoedaToken setMigrationagent should throw if migrationAgent is already set",
                "timedOut": false,
                "duration": 378,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.setMigrationAgent(agent.address);\n      return utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, agent.address));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "aa7b4b72-2680-4fa4-af5d-f93bf559a2dd",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign migrationAgent attribute",
                "fullTitle": "Contract: MoedaToken setMigrationagent should assign migrationAgent attribute",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.setMigrationAgent(agent.address);\n      const agentAddress = await instance.migrationAgent.call();\n      assert.strictEqual(agentAddress, agent.address);",
                "err": {},
                "isRoot": false,
                "uuid": "4299ec28-5f7d-4c84-abb8-089538c6eb33",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "006952b5-45dc-4252-977d-a9466ec17402",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: MoedaToken setMigrationagent \"before each\" hook",
                "timedOut": false,
                "duration": 50,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async \n      agent = await MockMigrationAgent.new();\n      await instance.unlock();",
                "err": {},
                "isRoot": false,
                "uuid": "81374128-770f-4f8c-a12e-c71e271d6eb1",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [
              {
                "title": "should assign migrationAgent attribute",
                "fullTitle": "Contract: MoedaToken setMigrationagent should assign migrationAgent attribute",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.setMigrationAgent(agent.address);\n      const agentAddress = await instance.migrationAgent.call();\n      assert.strictEqual(agentAddress, agent.address);",
                "err": {},
                "isRoot": false,
                "uuid": "4299ec28-5f7d-4c84-abb8-089538c6eb33",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [
              {
                "title": "should throw if minting is active",
                "fullTitle": "Contract: MoedaToken setMigrationagent should throw if minting is active",
                "timedOut": false,
                "duration": 377,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const token = await MoedaToken.new();\n      return utils.shouldThrowVmException(\n        token.setMigrationAgent.bind(token, agent.address));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "2538d671-30d4-4726-8277-9c8c7c1370a6",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if sender is not owner",
                "fullTitle": "Contract: MoedaToken setMigrationagent should throw if sender is not owner",
                "timedOut": false,
                "duration": 6,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(\n          instance, agent.address, { from: accounts[1] })))",
                "err": {
                  "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "c55bb657-32ef-4944-a0e5-220e2e939265",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if argument is null address",
                "fullTitle": "Contract: MoedaToken setMigrationagent should throw if argument is null address",
                "timedOut": false,
                "duration": 306,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, NULL_ADDRESS)))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "4e4d52ad-8df1-40a1-ac2a-5a7fbafdfc56",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if argument is not a contract",
                "fullTitle": "Contract: MoedaToken setMigrationagent should throw if argument is not a contract",
                "timedOut": false,
                "duration": 336,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, accounts[1])))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "81213c40-b8da-40ea-8d1d-68edef1615b9",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if migrationAgent is already set",
                "fullTitle": "Contract: MoedaToken setMigrationagent should throw if migrationAgent is already set",
                "timedOut": false,
                "duration": 378,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.setMigrationAgent(agent.address);\n      return utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, agent.address));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "aa7b4b72-2680-4fa4-af5d-f93bf559a2dd",
                "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 6,
            "totalPasses": 1,
            "totalFailures": 5,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1431,
            "rootEmpty": false
          },
          {
            "title": "migrate",
            "suites": [],
            "tests": [
              {
                "title": "should throw when minting is still active",
                "fullTitle": "Contract: MoedaToken migrate should throw when minting is still active",
                "timedOut": false,
                "duration": 361,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const token = await MoedaToken.new();\n      const mintingFinished = await token.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      return utils.shouldThrowVmException(token.migrate.bind(instance, spender, balance));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "7a92a159-b021-41e2-9fe7-987e6eb52d9d",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw when beneficiary is null address",
                "fullTitle": "Contract: MoedaToken migrate should throw when beneficiary is null address",
                "timedOut": false,
                "duration": 325,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async (\n      utils.shouldThrowVmException(\n        instance.migrate.bind(instance, NULL_ADDRESS, balance)))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "4da18798-199d-48fe-b77c-514ad7ca56c7",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw when migrationAgent has not been set",
                "fullTitle": "Contract: MoedaToken migrate should throw when migrationAgent has not been set",
                "timedOut": false,
                "duration": 361,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const token = await MoedaToken.new(spender);\n      const agent = await token.migrationAgent.call();\n      assert.strictEqual(agent, NULL_ADDRESS);\n      return utils.shouldThrowVmException(\n        token.migrate.bind(token, spender, balance));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "a6b93ca2-85e9-498c-8df7-abcfa48444e6",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw when amount is zero",
                "fullTitle": "Contract: MoedaToken migrate should throw when amount is zero",
                "timedOut": false,
                "duration": 305,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async (\n      utils.shouldThrowVmException(\n        instance.migrate.bind(instance, spender, 0)))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "9cb17e47-0c76-4a01-adbb-70694ec0fbde",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should destroy old tokens and call migration agent",
                "fullTitle": "Contract: MoedaToken migrate should destroy old tokens and call migration agent",
                "timedOut": false,
                "duration": 332,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const agentAddress = await instance.migrationAgent.call();\n      const agent = MockMigrationAgent.at(agentAddress);\n      const amountMigrated = balance - 1;\n      const recipient = accounts[3];\n      await instance.migrate(recipient, amountMigrated, { from: spender });\n      const newBalance = await instance.balanceOf.call(spender);\n      const agentBalance = await agent.balanceOf.call(recipient);\n      const totalSupply = await instance.totalSupply.call();\n      const totalMigrated = await instance.totalMigrated.call();\n      assert.strictEqual(newBalance.toNumber(), 1);\n      assert.strictEqual(agentBalance.toNumber(), amountMigrated);\n      assert.strictEqual(totalSupply.toNumber(), 1);\n      assert.strictEqual(totalMigrated.toNumber(), amountMigrated);\n      const log = await utils.getLatestEvent(instance, 'LogMigration');\n      assert.strictEqual(log.spender, spender);\n      assert.strictEqual(log.grantee, recipient);\n      assert.strictEqual(log.amount.toNumber(), amountMigrated);",
                "err": {},
                "isRoot": false,
                "uuid": "2e559a85-9e42-4bd8-adf8-dc49261526d0",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: MoedaToken migrate \"before each\" hook",
                "timedOut": false,
                "duration": 89,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.create(spender, balance);\n      const agent = await MockMigrationAgent.new();\n      await instance.unlock();\n      await instance.setMigrationAgent(agent.address);",
                "err": {},
                "isRoot": false,
                "uuid": "405a02a4-1c2a-4f5d-b4e4-87df8f604256",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [
              {
                "title": "should destroy old tokens and call migration agent",
                "fullTitle": "Contract: MoedaToken migrate should destroy old tokens and call migration agent",
                "timedOut": false,
                "duration": 332,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const agentAddress = await instance.migrationAgent.call();\n      const agent = MockMigrationAgent.at(agentAddress);\n      const amountMigrated = balance - 1;\n      const recipient = accounts[3];\n      await instance.migrate(recipient, amountMigrated, { from: spender });\n      const newBalance = await instance.balanceOf.call(spender);\n      const agentBalance = await agent.balanceOf.call(recipient);\n      const totalSupply = await instance.totalSupply.call();\n      const totalMigrated = await instance.totalMigrated.call();\n      assert.strictEqual(newBalance.toNumber(), 1);\n      assert.strictEqual(agentBalance.toNumber(), amountMigrated);\n      assert.strictEqual(totalSupply.toNumber(), 1);\n      assert.strictEqual(totalMigrated.toNumber(), amountMigrated);\n      const log = await utils.getLatestEvent(instance, 'LogMigration');\n      assert.strictEqual(log.spender, spender);\n      assert.strictEqual(log.grantee, recipient);\n      assert.strictEqual(log.amount.toNumber(), amountMigrated);",
                "err": {},
                "isRoot": false,
                "uuid": "2e559a85-9e42-4bd8-adf8-dc49261526d0",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [
              {
                "title": "should throw when minting is still active",
                "fullTitle": "Contract: MoedaToken migrate should throw when minting is still active",
                "timedOut": false,
                "duration": 361,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const token = await MoedaToken.new();\n      const mintingFinished = await token.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      return utils.shouldThrowVmException(token.migrate.bind(instance, spender, balance));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "7a92a159-b021-41e2-9fe7-987e6eb52d9d",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw when beneficiary is null address",
                "fullTitle": "Contract: MoedaToken migrate should throw when beneficiary is null address",
                "timedOut": false,
                "duration": 325,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async (\n      utils.shouldThrowVmException(\n        instance.migrate.bind(instance, NULL_ADDRESS, balance)))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "4da18798-199d-48fe-b77c-514ad7ca56c7",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw when migrationAgent has not been set",
                "fullTitle": "Contract: MoedaToken migrate should throw when migrationAgent has not been set",
                "timedOut": false,
                "duration": 361,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const token = await MoedaToken.new(spender);\n      const agent = await token.migrationAgent.call();\n      assert.strictEqual(agent, NULL_ADDRESS);\n      return utils.shouldThrowVmException(\n        token.migrate.bind(token, spender, balance));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "a6b93ca2-85e9-498c-8df7-abcfa48444e6",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw when amount is zero",
                "fullTitle": "Contract: MoedaToken migrate should throw when amount is zero",
                "timedOut": false,
                "duration": 305,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async (\n      utils.shouldThrowVmException(\n        instance.migrate.bind(instance, spender, 0)))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "9cb17e47-0c76-4a01-adbb-70694ec0fbde",
                "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 1,
            "totalFailures": 4,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1684,
            "rootEmpty": false
          },
          {
            "title": "burn",
            "suites": [],
            "tests": [
              {
                "title": "should throw when amount is zero",
                "fullTitle": "Contract: MoedaToken burn should throw when amount is zero",
                "timedOut": false,
                "duration": 323,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(token.burn.bind(\n        token, 0, { from: accounts[3] })))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "ebb89c6d-9c43-417c-9555-780095701f8d",
                "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw when balance is less than amount",
                "fullTitle": "Contract: MoedaToken burn should throw when balance is less than amount",
                "timedOut": false,
                "duration": 305,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(\n        token.burn.bind(token, balance + 1, { from: accounts[3] })))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "b83edbbe-f961-4434-b6a2-6666c786044d",
                "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should reduce total supply and sender balance",
                "fullTitle": "Contract: MoedaToken burn should reduce total supply and sender balance",
                "timedOut": false,
                "duration": 329,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const amountToBurn = 45;\n      await token.burn(amountToBurn, { from: accounts[3] });\n      const supply = await token.totalSupply.call();\n      const newBalance = await token.balanceOf.call(accounts[3]);\n      assert.isTrue(supply.eq(balance - amountToBurn));\n      assert.isTrue(newBalance.eq(balance - amountToBurn));\n      const event = await utils.getLatestEvent(token, 'LogDestruction');\n      assert.isTrue(event.amount.eq(amountToBurn));",
                "err": {},
                "isRoot": false,
                "uuid": "1a31e176-c59c-4d5b-a07b-b21d046e72f2",
                "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: MoedaToken burn \"before each\" hook",
                "timedOut": false,
                "duration": 44,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async \n      token = await MoedaToken.new();\n      return token.create(accounts[3], balance);",
                "err": {},
                "isRoot": false,
                "uuid": "bf209a7e-62b0-443e-9b85-fad014ead25e",
                "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [
              {
                "title": "should reduce total supply and sender balance",
                "fullTitle": "Contract: MoedaToken burn should reduce total supply and sender balance",
                "timedOut": false,
                "duration": 329,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const amountToBurn = 45;\n      await token.burn(amountToBurn, { from: accounts[3] });\n      const supply = await token.totalSupply.call();\n      const newBalance = await token.balanceOf.call(accounts[3]);\n      assert.isTrue(supply.eq(balance - amountToBurn));\n      assert.isTrue(newBalance.eq(balance - amountToBurn));\n      const event = await utils.getLatestEvent(token, 'LogDestruction');\n      assert.isTrue(event.amount.eq(amountToBurn));",
                "err": {},
                "isRoot": false,
                "uuid": "1a31e176-c59c-4d5b-a07b-b21d046e72f2",
                "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [
              {
                "title": "should throw when amount is zero",
                "fullTitle": "Contract: MoedaToken burn should throw when amount is zero",
                "timedOut": false,
                "duration": 323,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(token.burn.bind(\n        token, 0, { from: accounts[3] })))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "ebb89c6d-9c43-417c-9555-780095701f8d",
                "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw when balance is less than amount",
                "fullTitle": "Contract: MoedaToken burn should throw when balance is less than amount",
                "timedOut": false,
                "duration": 305,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(\n        token.burn.bind(token, balance + 1, { from: accounts[3] })))",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "b83edbbe-f961-4434-b6a2-6666c786044d",
                "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 1,
            "totalFailures": 2,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 957,
            "rootEmpty": false
          },
          {
            "title": "create()",
            "suites": [],
            "tests": [
              {
                "title": "should throw if newly generated tokens would exceed max supply",
                "fullTitle": "Contract: MoedaToken create() should throw if newly generated tokens would exceed max supply",
                "timedOut": false,
                "duration": 316,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n        const maxTokens = await instance.MAX_TOKENS.call();\n        const totalSupply = await instance.totalSupply.call();\n        assert.equals(totalSupply, 0);\n        return utils.shouldThrowVmException(\n          instance.create.bind(\n            instance, accounts[2], maxTokens.plus(1)));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "a40900e9-8b13-4daa-8f77-453204fbe5dd",
                "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increase tokenSupply by given amount",
                "fullTitle": "Contract: MoedaToken create() should increase tokenSupply by given amount",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const supply = await instance.totalSupply.call();\n      await instance.create(\n        accounts[1], web3.toWei(500));\n      const newSupply = await instance.totalSupply.call();\n      assert.equal(\n        newSupply.toString(), supply.plus(web3.toWei(500)).toString());",
                "err": {},
                "isRoot": false,
                "uuid": "0bd07de1-5c03-41e5-b363-19f215d3d488",
                "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increase the balance of given recipient by amount",
                "fullTitle": "Contract: MoedaToken create() should increase the balance of given recipient by amount",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n        const balance = await instance.balanceOf.call(accounts[2]);\n        await instance.create(\n          accounts[2], web3.toWei(500));\n        const newBalance = await instance.balanceOf.call(accounts[2]);\n        assert.equal(\n          newBalance.toString(),\n          balance.plus(web3.toWei(500)).toString());",
                "err": {},
                "isRoot": false,
                "uuid": "51097b8a-c266-4873-b604-8873ff1fe42a",
                "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw an error when minting is not active",
                "fullTitle": "Contract: MoedaToken create() should throw an error when minting is not active",
                "timedOut": false,
                "duration": 365,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const token = await MoedaToken.new();\n      await token.unlock();\n      const mintingFinished = await token.mintingFinished.call();\n      assert.isTrue(mintingFinished);\n      return utils.shouldThrowVmException(token.create.bind(token,\n        accounts[1], web3.toWei(500)));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "7486fa52-c871-4068-a456-1399b57ab5f1",
                "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit a LogCreation event on success",
                "fullTitle": "Contract: MoedaToken create() should emit a LogCreation event on success",
                "timedOut": false,
                "duration": 348,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const token = await MoedaToken.new();\n      try {\n        await token.create(\n          accounts[1], web3.toWei(500));\n        const event = await utils.getLatestEvent(\n          token, 'LogCreation');\n        assert.strictEqual(event.donor, accounts[1]);\n        assert.strictEqual(\n          event.tokensReceived.toString(10),\n          web3.toWei(500).toString(10));\n      } catch (error) {\n        fail(`should not have thrown ${error}`);\n      }",
                "err": {},
                "isRoot": false,
                "uuid": "0a6d894a-b8aa-4a41-9945-f44c49c54dcf",
                "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "dc26404c-8c55-464a-a0c7-26d740b75988",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [
              {
                "title": "should increase tokenSupply by given amount",
                "fullTitle": "Contract: MoedaToken create() should increase tokenSupply by given amount",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const supply = await instance.totalSupply.call();\n      await instance.create(\n        accounts[1], web3.toWei(500));\n      const newSupply = await instance.totalSupply.call();\n      assert.equal(\n        newSupply.toString(), supply.plus(web3.toWei(500)).toString());",
                "err": {},
                "isRoot": false,
                "uuid": "0bd07de1-5c03-41e5-b363-19f215d3d488",
                "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increase the balance of given recipient by amount",
                "fullTitle": "Contract: MoedaToken create() should increase the balance of given recipient by amount",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n        const balance = await instance.balanceOf.call(accounts[2]);\n        await instance.create(\n          accounts[2], web3.toWei(500));\n        const newBalance = await instance.balanceOf.call(accounts[2]);\n        assert.equal(\n          newBalance.toString(),\n          balance.plus(web3.toWei(500)).toString());",
                "err": {},
                "isRoot": false,
                "uuid": "51097b8a-c266-4873-b604-8873ff1fe42a",
                "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit a LogCreation event on success",
                "fullTitle": "Contract: MoedaToken create() should emit a LogCreation event on success",
                "timedOut": false,
                "duration": 348,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const token = await MoedaToken.new();\n      try {\n        await token.create(\n          accounts[1], web3.toWei(500));\n        const event = await utils.getLatestEvent(\n          token, 'LogCreation');\n        assert.strictEqual(event.donor, accounts[1]);\n        assert.strictEqual(\n          event.tokensReceived.toString(10),\n          web3.toWei(500).toString(10));\n      } catch (error) {\n        fail(`should not have thrown ${error}`);\n      }",
                "err": {},
                "isRoot": false,
                "uuid": "0a6d894a-b8aa-4a41-9945-f44c49c54dcf",
                "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [
              {
                "title": "should throw if newly generated tokens would exceed max supply",
                "fullTitle": "Contract: MoedaToken create() should throw if newly generated tokens would exceed max supply",
                "timedOut": false,
                "duration": 316,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n        const maxTokens = await instance.MAX_TOKENS.call();\n        const totalSupply = await instance.totalSupply.call();\n        assert.equals(totalSupply, 0);\n        return utils.shouldThrowVmException(\n          instance.create.bind(\n            instance, accounts[2], maxTokens.plus(1)));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "a40900e9-8b13-4daa-8f77-453204fbe5dd",
                "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw an error when minting is not active",
                "fullTitle": "Contract: MoedaToken create() should throw an error when minting is not active",
                "timedOut": false,
                "duration": 365,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const token = await MoedaToken.new();\n      await token.unlock();\n      const mintingFinished = await token.mintingFinished.call();\n      assert.isTrue(mintingFinished);\n      return utils.shouldThrowVmException(token.create.bind(token,\n        accounts[1], web3.toWei(500)));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "7486fa52-c871-4068-a456-1399b57ab5f1",
                "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 3,
            "totalFailures": 2,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1082,
            "rootEmpty": false
          },
          {
            "title": "unlock()",
            "suites": [],
            "tests": [
              {
                "title": "should only allow owner to invoke",
                "fullTitle": "Contract: MoedaToken unlock() should only allow owner to invoke",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await utils.shouldThrowVmException(instance.unlock.bind(\n        instance, { from: accounts[1] }));\n      const mintingFinished = await instance.mintingFinished.call();\n      assert.strictEqual(mintingFinished, false);",
                "err": {
                  "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "e6c88420-9f65-4ade-9704-71d216400286",
                "parentUUID": "af4d7bd5-8da3-4302-bc99-61fd1c9d7c7b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set mintingFinished to true",
                "fullTitle": "Contract: MoedaToken unlock() should set mintingFinished to true",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.unlock();\n      const mintingFinished = await instance.mintingFinished.call();\n      assert.strictEqual(mintingFinished, true, 'should be unlocked');",
                "err": {},
                "isRoot": false,
                "uuid": "f5cea128-2cd5-4059-9821-f1ad665c331c",
                "parentUUID": "af4d7bd5-8da3-4302-bc99-61fd1c9d7c7b",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "af4d7bd5-8da3-4302-bc99-61fd1c9d7c7b",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [
              {
                "title": "should set mintingFinished to true",
                "fullTitle": "Contract: MoedaToken unlock() should set mintingFinished to true",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.unlock();\n      const mintingFinished = await instance.mintingFinished.call();\n      assert.strictEqual(mintingFinished, true, 'should be unlocked');",
                "err": {},
                "isRoot": false,
                "uuid": "f5cea128-2cd5-4059-9821-f1ad665c331c",
                "parentUUID": "af4d7bd5-8da3-4302-bc99-61fd1c9d7c7b",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [
              {
                "title": "should only allow owner to invoke",
                "fullTitle": "Contract: MoedaToken unlock() should only allow owner to invoke",
                "timedOut": false,
                "duration": 3,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await utils.shouldThrowVmException(instance.unlock.bind(\n        instance, { from: accounts[1] }));\n      const mintingFinished = await instance.mintingFinished.call();\n      assert.strictEqual(mintingFinished, false);",
                "err": {
                  "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "e6c88420-9f65-4ade-9704-71d216400286",
                "parentUUID": "af4d7bd5-8da3-4302-bc99-61fd1c9d7c7b",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 1,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 31,
            "rootEmpty": false
          },
          {
            "title": "transfer()",
            "suites": [],
            "tests": [
              {
                "title": "should throw when minting is active",
                "fullTitle": "Contract: MoedaToken transfer() should throw when minting is active",
                "timedOut": false,
                "duration": 5,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const mintingFinished = await instance.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      return utils.shouldThrowVmException(\n        instance.transfer.bind(instance,\n          accounts[2], web3.toWei(10), { from: accounts[1] }));",
                "err": {
                  "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "ec83409b-003f-41df-a747-d81474f8504e",
                "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if recipient is null address",
                "fullTitle": "Contract: MoedaToken transfer() should throw if recipient is null address",
                "timedOut": false,
                "duration": 25,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], 100);\n      return utils.shouldThrowVmException(\n        instance.transfer.bind(instance, NULL_ADDRESS, 90, { from: accounts[1] }));",
                "err": {
                  "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "e202f9da-d391-48dc-ae1f-b0d23630f9cc",
                "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not throw when transfers are unlocked",
                "fullTitle": "Contract: MoedaToken transfer() should not throw when transfers are unlocked",
                "timedOut": false,
                "duration": 28,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      try {\n        await instance.unlock();\n        const mintingFinished = await instance.mintingFinished.call();\n        assert.isTrue(mintingFinished);\n        const amount = web3.toWei(15);\n        await instance.transfer(\n          accounts[2], amount, { from: accounts[1] });\n        const balance = await instance.balanceOf.call(accounts[1]);\n        assert.strictEqual(web3.fromWei(balance).toNumber(), 1485);\n        const recipientBalance = await instance.balanceOf.call(accounts[2]);\n        assert.strictEqual(\n          recipientBalance.toString(),\n          amount.toString());\n      } catch (error) {\n        fail(error.message);\n      }",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at fail (test/utils.js:104:11)\n    at Context.it (test/moedatoken.js:272:9)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "624b34e8-aa29-4b4c-957b-27230b5393da",
                "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: MoedaToken transfer() \"before each\" hook",
                "timedOut": false,
                "duration": 29,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], web3.toWei(1500));",
                "err": {},
                "isRoot": false,
                "uuid": "02d95cdb-7e29-43a7-8fb5-8c33876cf731",
                "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [],
            "failures": [
              {
                "title": "should throw when minting is active",
                "fullTitle": "Contract: MoedaToken transfer() should throw when minting is active",
                "timedOut": false,
                "duration": 5,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const mintingFinished = await instance.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      return utils.shouldThrowVmException(\n        instance.transfer.bind(instance,\n          accounts[2], web3.toWei(10), { from: accounts[1] }));",
                "err": {
                  "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "ec83409b-003f-41df-a747-d81474f8504e",
                "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if recipient is null address",
                "fullTitle": "Contract: MoedaToken transfer() should throw if recipient is null address",
                "timedOut": false,
                "duration": 25,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], 100);\n      return utils.shouldThrowVmException(\n        instance.transfer.bind(instance, NULL_ADDRESS, 90, { from: accounts[1] }));",
                "err": {
                  "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "e202f9da-d391-48dc-ae1f-b0d23630f9cc",
                "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not throw when transfers are unlocked",
                "fullTitle": "Contract: MoedaToken transfer() should not throw when transfers are unlocked",
                "timedOut": false,
                "duration": 28,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      try {\n        await instance.unlock();\n        const mintingFinished = await instance.mintingFinished.call();\n        assert.isTrue(mintingFinished);\n        const amount = web3.toWei(15);\n        await instance.transfer(\n          accounts[2], amount, { from: accounts[1] });\n        const balance = await instance.balanceOf.call(accounts[1]);\n        assert.strictEqual(web3.fromWei(balance).toNumber(), 1485);\n        const recipientBalance = await instance.balanceOf.call(accounts[2]);\n        assert.strictEqual(\n          recipientBalance.toString(),\n          amount.toString());\n      } catch (error) {\n        fail(error.message);\n      }",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at fail (test/utils.js:104:11)\n    at Context.it (test/moedatoken.js:272:9)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "624b34e8-aa29-4b4c-957b-27230b5393da",
                "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 0,
            "totalFailures": 3,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 58,
            "rootEmpty": false
          },
          {
            "title": "transferFrom()",
            "suites": [],
            "tests": [
              {
                "title": "should throw if recipient is null address",
                "fullTitle": "Contract: MoedaToken transferFrom() should throw if recipient is null address",
                "timedOut": false,
                "duration": 24,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], 100);\n      await instance.approve(accounts[2], 90, { from: accounts[1] });\n      return utils.shouldThrowVmException(\n        instance.transferFrom.bind(\n          instance, accounts[1], NULL_ADDRESS, 90, { from: accounts[2] }));",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
                },
                "isRoot": false,
                "uuid": "8482a0e5-635f-40f7-bd17-dbd0119da498",
                "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw when minting is active",
                "fullTitle": "Contract: MoedaToken transferFrom() should throw when minting is active",
                "timedOut": false,
                "duration": 6,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const mintingFinished = await instance.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      await instance.approve(\n        accounts[2], web3.toWei(100), { from: accounts[1] });\n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(web3.fromWei(allowance).toNumber(), 100);\n      return utils.shouldThrowVmException(\n        instance.transferFrom.bind(instance,\n          accounts[1], accounts[2], web3.toWei(50),\n          { from: accounts[2] }));",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
                },
                "isRoot": false,
                "uuid": "8401dffb-3b42-4e89-9b3a-f0e22dc97221",
                "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not throw when transfers are unlocked",
                "fullTitle": "Contract: MoedaToken transferFrom() should not throw when transfers are unlocked",
                "timedOut": false,
                "duration": 29,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      try {\n        await instance.unlock();\n        const mintingFinished = await instance.mintingFinished.call();\n        assert.isTrue(mintingFinished);\n        await instance.approve(\n          accounts[2], web3.toWei(100), { from: accounts[1] });\n        const allowance = await instance.allowance.call(\n          accounts[1], accounts[2]);\n        assert.strictEqual(web3.fromWei(allowance).toNumber(), 100);\n        await instance.transferFrom(\n          accounts[1],\n          accounts[2],\n          web3.toWei(50),\n          { from: accounts[2] });\n        const balance = await instance.balanceOf.call(accounts[1]);\n        assert.strictEqual(web3.fromWei(balance).toNumber(), 1450);\n        const recipientBalance = await instance.balanceOf.call(accounts[2]);\n        assert.strictEqual(\n          recipientBalance.toString(),\n          web3.toWei(50).toString());\n      } catch (error) {\n        fail(error.message);\n      }",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at fail (test/utils.js:104:11)\n    at Context.it (test/moedatoken.js:332:9)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "430f22b3-cad8-418d-ae6c-8614204f30ff",
                "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "4f7e733f-89ca-487d-954c-73f47e4ca838",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: MoedaToken transferFrom() \"before each\" hook",
                "timedOut": false,
                "duration": 21,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], web3.toWei(1500));",
                "err": {},
                "isRoot": false,
                "uuid": "321ec7f9-7b8e-4d6f-9be0-503143bc99f0",
                "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [],
            "failures": [
              {
                "title": "should throw if recipient is null address",
                "fullTitle": "Contract: MoedaToken transferFrom() should throw if recipient is null address",
                "timedOut": false,
                "duration": 24,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], 100);\n      await instance.approve(accounts[2], 90, { from: accounts[1] });\n      return utils.shouldThrowVmException(\n        instance.transferFrom.bind(\n          instance, accounts[1], NULL_ADDRESS, 90, { from: accounts[2] }));",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
                },
                "isRoot": false,
                "uuid": "8482a0e5-635f-40f7-bd17-dbd0119da498",
                "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw when minting is active",
                "fullTitle": "Contract: MoedaToken transferFrom() should throw when minting is active",
                "timedOut": false,
                "duration": 6,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      const mintingFinished = await instance.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      await instance.approve(\n        accounts[2], web3.toWei(100), { from: accounts[1] });\n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(web3.fromWei(allowance).toNumber(), 100);\n      return utils.shouldThrowVmException(\n        instance.transferFrom.bind(instance,\n          accounts[1], accounts[2], web3.toWei(50),\n          { from: accounts[2] }));",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
                },
                "isRoot": false,
                "uuid": "8401dffb-3b42-4e89-9b3a-f0e22dc97221",
                "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not throw when transfers are unlocked",
                "fullTitle": "Contract: MoedaToken transferFrom() should not throw when transfers are unlocked",
                "timedOut": false,
                "duration": 29,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      try {\n        await instance.unlock();\n        const mintingFinished = await instance.mintingFinished.call();\n        assert.isTrue(mintingFinished);\n        await instance.approve(\n          accounts[2], web3.toWei(100), { from: accounts[1] });\n        const allowance = await instance.allowance.call(\n          accounts[1], accounts[2]);\n        assert.strictEqual(web3.fromWei(allowance).toNumber(), 100);\n        await instance.transferFrom(\n          accounts[1],\n          accounts[2],\n          web3.toWei(50),\n          { from: accounts[2] });\n        const balance = await instance.balanceOf.call(accounts[1]);\n        assert.strictEqual(web3.fromWei(balance).toNumber(), 1450);\n        const recipientBalance = await instance.balanceOf.call(accounts[2]);\n        assert.strictEqual(\n          recipientBalance.toString(),\n          web3.toWei(50).toString());\n      } catch (error) {\n        fail(error.message);\n      }",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at fail (test/utils.js:104:11)\n    at Context.it (test/moedatoken.js:332:9)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "430f22b3-cad8-418d-ae6c-8614204f30ff",
                "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasBeforeHooks": true,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 0,
            "totalFailures": 3,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 59,
            "rootEmpty": false
          },
          {
            "title": "balanceOf()",
            "suites": [],
            "tests": [
              {
                "title": "should return balance of token holder",
                "fullTitle": "Contract: MoedaToken balanceOf() should return balance of token holder",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      const balance = await instance.balanceOf.call(accounts[1]);\n      assert.strictEqual(balance.toString(), web3.toWei(15).toString());",
                "err": {},
                "isRoot": false,
                "uuid": "a9256a7c-0c16-4835-b52d-17addc1e71b0",
                "parentUUID": "7043e1de-1a80-441a-bb7c-e28cee3689fd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return zero when sender has no balance",
                "fullTitle": "Contract: MoedaToken balanceOf() should return zero when sender has no balance",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const balance = await instance.balanceOf.call(accounts[3]);\n      assert.strictEqual(balance.toNumber(), 0);",
                "err": {},
                "isRoot": false,
                "uuid": "bc080252-191c-4328-b625-25a905961271",
                "parentUUID": "7043e1de-1a80-441a-bb7c-e28cee3689fd",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "7043e1de-1a80-441a-bb7c-e28cee3689fd",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [
              {
                "title": "should return balance of token holder",
                "fullTitle": "Contract: MoedaToken balanceOf() should return balance of token holder",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      const balance = await instance.balanceOf.call(accounts[1]);\n      assert.strictEqual(balance.toString(), web3.toWei(15).toString());",
                "err": {},
                "isRoot": false,
                "uuid": "a9256a7c-0c16-4835-b52d-17addc1e71b0",
                "parentUUID": "7043e1de-1a80-441a-bb7c-e28cee3689fd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return zero when sender has no balance",
                "fullTitle": "Contract: MoedaToken balanceOf() should return zero when sender has no balance",
                "timedOut": false,
                "duration": 3,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const balance = await instance.balanceOf.call(accounts[3]);\n      assert.strictEqual(balance.toNumber(), 0);",
                "err": {},
                "isRoot": false,
                "uuid": "bc080252-191c-4328-b625-25a905961271",
                "parentUUID": "7043e1de-1a80-441a-bb7c-e28cee3689fd",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 33,
            "rootEmpty": false
          },
          {
            "title": "approve()",
            "suites": [],
            "tests": [
              {
                "title": "should set a given allowance for a requested spender",
                "fullTitle": "Contract: MoedaToken approve() should set a given allowance for a requested spender",
                "timedOut": false,
                "duration": 54,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n        const token = await MoedaToken.new(accounts[0]);\n        await token.create(accounts[1], web3.toWei(15));\n        const amount = web3.toWei(4);\n        await token.approve(\n          accounts[2], amount, { from: accounts[1] });\n        const allowance = await token.allowance.call(\n          accounts[1], accounts[2]);\n        assert.strictEqual(\n          allowance.toString(), amount.toString());",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
                },
                "isRoot": false,
                "uuid": "6f528f11-0bba-4729-ac1e-49b3e48d0bf6",
                "parentUUID": "3a6fbb38-d5ce-4880-86a5-e311560fe987",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit an approval event",
                "fullTitle": "Contract: MoedaToken approve() should emit an approval event",
                "timedOut": false,
                "duration": 34,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      const amount = web3.toWei(9);\n      await instance.approve(\n        accounts[3], amount, { from: accounts[1] });\n      const event = await utils.getLatestEvent(instance, 'Approval');\n      assert.strictEqual(event.owner, accounts[1]);\n      assert.strictEqual(event.spender, accounts[3]);\n      assert.strictEqual(event.value.toString(), amount.toString());",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
                },
                "isRoot": false,
                "uuid": "a803be02-89db-4a95-b3e8-016a1dbc38d1",
                "parentUUID": "3a6fbb38-d5ce-4880-86a5-e311560fe987",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "3a6fbb38-d5ce-4880-86a5-e311560fe987",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [],
            "failures": [
              {
                "title": "should set a given allowance for a requested spender",
                "fullTitle": "Contract: MoedaToken approve() should set a given allowance for a requested spender",
                "timedOut": false,
                "duration": 54,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n        const token = await MoedaToken.new(accounts[0]);\n        await token.create(accounts[1], web3.toWei(15));\n        const amount = web3.toWei(4);\n        await token.approve(\n          accounts[2], amount, { from: accounts[1] });\n        const allowance = await token.allowance.call(\n          accounts[1], accounts[2]);\n        assert.strictEqual(\n          allowance.toString(), amount.toString());",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
                },
                "isRoot": false,
                "uuid": "6f528f11-0bba-4729-ac1e-49b3e48d0bf6",
                "parentUUID": "3a6fbb38-d5ce-4880-86a5-e311560fe987",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit an approval event",
                "fullTitle": "Contract: MoedaToken approve() should emit an approval event",
                "timedOut": false,
                "duration": 34,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      const amount = web3.toWei(9);\n      await instance.approve(\n        accounts[3], amount, { from: accounts[1] });\n      const event = await utils.getLatestEvent(instance, 'Approval');\n      assert.strictEqual(event.owner, accounts[1]);\n      assert.strictEqual(event.spender, accounts[3]);\n      assert.strictEqual(event.value.toString(), amount.toString());",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
                },
                "isRoot": false,
                "uuid": "a803be02-89db-4a95-b3e8-016a1dbc38d1",
                "parentUUID": "3a6fbb38-d5ce-4880-86a5-e311560fe987",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 0,
            "totalFailures": 2,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": false,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 88,
            "rootEmpty": false
          },
          {
            "title": "allowance()",
            "suites": [],
            "tests": [
              {
                "title": "should return an allowed transfer amount",
                "fullTitle": "Contract: MoedaToken allowance() should return an allowed transfer amount",
                "timedOut": false,
                "duration": 38,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      await instance.approve(\n        accounts[2], web3.toWei(8), { from: accounts[1] });\n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(\n        web3.fromWei(allowance).toNumber(), 8);",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
                },
                "isRoot": false,
                "uuid": "4b8549a3-07d5-4fd7-8117-396348d40c14",
                "parentUUID": "2bcee5b7-309f-437d-bcd3-9d0b48ae6e28",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should return zero if no allowance exists",
                "fullTitle": "Contract: MoedaToken allowance() should return zero if no allowance exists",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(\n        web3.fromWei(allowance).toNumber(), 0);",
                "err": {},
                "isRoot": false,
                "uuid": "d791c278-f67d-4d65-985a-9c273bdf532c",
                "parentUUID": "2bcee5b7-309f-437d-bcd3-9d0b48ae6e28",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "2bcee5b7-309f-437d-bcd3-9d0b48ae6e28",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [
              {
                "title": "should return zero if no allowance exists",
                "fullTitle": "Contract: MoedaToken allowance() should return zero if no allowance exists",
                "timedOut": false,
                "duration": 9,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(\n        web3.fromWei(allowance).toNumber(), 0);",
                "err": {},
                "isRoot": false,
                "uuid": "d791c278-f67d-4d65-985a-9c273bdf532c",
                "parentUUID": "2bcee5b7-309f-437d-bcd3-9d0b48ae6e28",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [
              {
                "title": "should return an allowed transfer amount",
                "fullTitle": "Contract: MoedaToken allowance() should return an allowed transfer amount",
                "timedOut": false,
                "duration": 38,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      await instance.approve(\n        accounts[2], web3.toWei(8), { from: accounts[1] });\n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(\n        web3.fromWei(allowance).toNumber(), 8);",
                "err": {
                  "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
                  "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
                },
                "isRoot": false,
                "uuid": "4b8549a3-07d5-4fd7-8117-396348d40c14",
                "parentUUID": "2bcee5b7-309f-437d-bcd3-9d0b48ae6e28",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 1,
            "totalFailures": 1,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 47,
            "rootEmpty": false
          },
          {
            "title": "createBonusTokens",
            "suites": [],
            "tests": [
              {
                "title": "should throw if caller is not owner",
                "fullTitle": "Contract: MoedaToken createBonusTokens should throw if caller is not owner",
                "timedOut": false,
                "duration": 5,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(\n        instance.createBonusTokens.bind(instance, { from: accounts[1] })))",
                "err": {
                  "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "7d5ad6a8-39a5-4258-9f0c-5eaa1046c795",
                "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if already called",
                "fullTitle": "Contract: MoedaToken createBonusTokens should throw if already called",
                "timedOut": false,
                "duration": 405,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.createBonusTokens();\n      await utils.shouldThrowVmException(\n        instance.createBonusTokens.bind(instance));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "19cb8e65-d40a-45aa-92ba-8090093abe3a",
                "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create the right amount of tokens",
                "fullTitle": "Contract: MoedaToken createBonusTokens should create the right amount of tokens",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.createBonusTokens();\n      return Promise.all(_.map(bonusDonors, async (amount, donor) => {\n        const balance = await instance.balanceOf.call(donor);\n        assert.equals(balance, web3.toBigNumber(amount).mul(bonusTokensPerEth));\n      }));",
                "err": {},
                "isRoot": false,
                "uuid": "b8cc8bbf-e4a0-4256-ba67-72485a1be613",
                "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 300000,
            "file": "/test/moedatoken.js",
            "uuid": "9f7aadec-2750-4741-9bd8-c8007672011a",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
            "passes": [
              {
                "title": "should create the right amount of tokens",
                "fullTitle": "Contract: MoedaToken createBonusTokens should create the right amount of tokens",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "async \n      await instance.createBonusTokens();\n      return Promise.all(_.map(bonusDonors, async (amount, donor) => {\n        const balance = await instance.balanceOf.call(donor);\n        assert.equals(balance, web3.toBigNumber(amount).mul(bonusTokensPerEth));\n      }));",
                "err": {},
                "isRoot": false,
                "uuid": "b8cc8bbf-e4a0-4256-ba67-72485a1be613",
                "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [
              {
                "title": "should throw if caller is not owner",
                "fullTitle": "Contract: MoedaToken createBonusTokens should throw if caller is not owner",
                "timedOut": false,
                "duration": 5,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "(\n      utils.shouldThrowVmException(\n        instance.createBonusTokens.bind(instance, { from: accounts[1] })))",
                "err": {
                  "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "7d5ad6a8-39a5-4258-9f0c-5eaa1046c795",
                "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should throw if already called",
                "fullTitle": "Contract: MoedaToken createBonusTokens should throw if already called",
                "timedOut": false,
                "duration": 405,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "async \n      await instance.createBonusTokens();\n      await utils.shouldThrowVmException(\n        instance.createBonusTokens.bind(instance));",
                "err": {
                  "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
                  "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
                },
                "isRoot": false,
                "uuid": "19cb8e65-d40a-45aa-92ba-8090093abe3a",
                "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
                "isHook": false,
                "skipped": false
              }
            ],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 1,
            "totalFailures": 2,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": true,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 507,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 300000,
        "file": "/test/moedatoken.js",
        "uuid": "af8fd75e-2882-4594-b4e6-11b40a5da984",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: MoedaToken \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "9e58266c-e477-44c4-9a91-5446b55eeaa9",
            "parentUUID": "af8fd75e-2882-4594-b4e6-11b40a5da984",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: MoedaToken \"before each\" hook: before test",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1c9963e9-1786-4906-93f7-084ae3f2a069",
            "parentUUID": "af8fd75e-2882-4594-b4e6-11b40a5da984",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: MoedaToken \"before each\" hook",
            "timedOut": false,
            "duration": 22,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "async \n    instance = await MoedaToken.new();",
            "err": {},
            "isRoot": false,
            "uuid": "b55def6a-7b4d-4080-a616-f6e867449223",
            "parentUUID": "af8fd75e-2882-4594-b4e6-11b40a5da984",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: MoedaToken \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4b17fbcf-16ec-4650-bcff-3e9471f88fb1",
            "parentUUID": "af8fd75e-2882-4594-b4e6-11b40a5da984",
            "isHook": true,
            "skipped": false
          }
        ],
        "fullFile": "/Users/rstorm/repos/audity/moeda-contracts/test/moedatoken.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": true,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "eca7d86c-2663-4a65-8f0d-7975c16cb25e",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should set owner to senders address",
      "fullTitle": "constructor should set owner to senders address",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const owner = await instance.owner.call();\n      assert.strictEqual(owner, accounts[0]);",
      "err": {},
      "isRoot": false,
      "uuid": "6f78c6dd-183b-4dbf-893e-9f74a0a25fc0",
      "parentUUID": "5f251f48-3222-4307-9c18-483c77f03b16",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should set allocations",
      "fullTitle": "constructor should set allocations",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "err": {},
      "isRoot": false,
      "uuid": "edaa71cc-5bc0-40dc-a5fc-a0b291e5427f",
      "parentUUID": "5f251f48-3222-4307-9c18-483c77f03b16",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if minting is active",
      "fullTitle": "setMigrationagent should throw if minting is active",
      "timedOut": false,
      "duration": 377,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const token = await MoedaToken.new();\n      return utils.shouldThrowVmException(\n        token.setMigrationAgent.bind(token, agent.address));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "2538d671-30d4-4726-8277-9c8c7c1370a6",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if sender is not owner",
      "fullTitle": "setMigrationagent should throw if sender is not owner",
      "timedOut": false,
      "duration": 6,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(\n          instance, agent.address, { from: accounts[1] })))",
      "err": {
        "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "c55bb657-32ef-4944-a0e5-220e2e939265",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if argument is null address",
      "fullTitle": "setMigrationagent should throw if argument is null address",
      "timedOut": false,
      "duration": 306,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, NULL_ADDRESS)))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "4e4d52ad-8df1-40a1-ac2a-5a7fbafdfc56",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if argument is not a contract",
      "fullTitle": "setMigrationagent should throw if argument is not a contract",
      "timedOut": false,
      "duration": 336,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, accounts[1])))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "81213c40-b8da-40ea-8d1d-68edef1615b9",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if migrationAgent is already set",
      "fullTitle": "setMigrationagent should throw if migrationAgent is already set",
      "timedOut": false,
      "duration": 378,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.setMigrationAgent(agent.address);\n      return utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, agent.address));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "aa7b4b72-2680-4fa4-af5d-f93bf559a2dd",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should assign migrationAgent attribute",
      "fullTitle": "setMigrationagent should assign migrationAgent attribute",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      await instance.setMigrationAgent(agent.address);\n      const agentAddress = await instance.migrationAgent.call();\n      assert.strictEqual(agentAddress, agent.address);",
      "err": {},
      "isRoot": false,
      "uuid": "4299ec28-5f7d-4c84-abb8-089538c6eb33",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when minting is still active",
      "fullTitle": "migrate should throw when minting is still active",
      "timedOut": false,
      "duration": 361,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const token = await MoedaToken.new();\n      const mintingFinished = await token.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      return utils.shouldThrowVmException(token.migrate.bind(instance, spender, balance));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "7a92a159-b021-41e2-9fe7-987e6eb52d9d",
      "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when beneficiary is null address",
      "fullTitle": "migrate should throw when beneficiary is null address",
      "timedOut": false,
      "duration": 325,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async (\n      utils.shouldThrowVmException(\n        instance.migrate.bind(instance, NULL_ADDRESS, balance)))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "4da18798-199d-48fe-b77c-514ad7ca56c7",
      "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when migrationAgent has not been set",
      "fullTitle": "migrate should throw when migrationAgent has not been set",
      "timedOut": false,
      "duration": 361,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const token = await MoedaToken.new(spender);\n      const agent = await token.migrationAgent.call();\n      assert.strictEqual(agent, NULL_ADDRESS);\n      return utils.shouldThrowVmException(\n        token.migrate.bind(token, spender, balance));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "a6b93ca2-85e9-498c-8df7-abcfa48444e6",
      "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when amount is zero",
      "fullTitle": "migrate should throw when amount is zero",
      "timedOut": false,
      "duration": 305,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async (\n      utils.shouldThrowVmException(\n        instance.migrate.bind(instance, spender, 0)))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "9cb17e47-0c76-4a01-adbb-70694ec0fbde",
      "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should destroy old tokens and call migration agent",
      "fullTitle": "migrate should destroy old tokens and call migration agent",
      "timedOut": false,
      "duration": 332,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const agentAddress = await instance.migrationAgent.call();\n      const agent = MockMigrationAgent.at(agentAddress);\n      const amountMigrated = balance - 1;\n      const recipient = accounts[3];\n      await instance.migrate(recipient, amountMigrated, { from: spender });\n      const newBalance = await instance.balanceOf.call(spender);\n      const agentBalance = await agent.balanceOf.call(recipient);\n      const totalSupply = await instance.totalSupply.call();\n      const totalMigrated = await instance.totalMigrated.call();\n      assert.strictEqual(newBalance.toNumber(), 1);\n      assert.strictEqual(agentBalance.toNumber(), amountMigrated);\n      assert.strictEqual(totalSupply.toNumber(), 1);\n      assert.strictEqual(totalMigrated.toNumber(), amountMigrated);\n      const log = await utils.getLatestEvent(instance, 'LogMigration');\n      assert.strictEqual(log.spender, spender);\n      assert.strictEqual(log.grantee, recipient);\n      assert.strictEqual(log.amount.toNumber(), amountMigrated);",
      "err": {},
      "isRoot": false,
      "uuid": "2e559a85-9e42-4bd8-adf8-dc49261526d0",
      "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when amount is zero",
      "fullTitle": "burn should throw when amount is zero",
      "timedOut": false,
      "duration": 323,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(token.burn.bind(\n        token, 0, { from: accounts[3] })))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "ebb89c6d-9c43-417c-9555-780095701f8d",
      "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when balance is less than amount",
      "fullTitle": "burn should throw when balance is less than amount",
      "timedOut": false,
      "duration": 305,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(\n        token.burn.bind(token, balance + 1, { from: accounts[3] })))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "b83edbbe-f961-4434-b6a2-6666c786044d",
      "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should reduce total supply and sender balance",
      "fullTitle": "burn should reduce total supply and sender balance",
      "timedOut": false,
      "duration": 329,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const amountToBurn = 45;\n      await token.burn(amountToBurn, { from: accounts[3] });\n      const supply = await token.totalSupply.call();\n      const newBalance = await token.balanceOf.call(accounts[3]);\n      assert.isTrue(supply.eq(balance - amountToBurn));\n      assert.isTrue(newBalance.eq(balance - amountToBurn));\n      const event = await utils.getLatestEvent(token, 'LogDestruction');\n      assert.isTrue(event.amount.eq(amountToBurn));",
      "err": {},
      "isRoot": false,
      "uuid": "1a31e176-c59c-4d5b-a07b-b21d046e72f2",
      "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if newly generated tokens would exceed max supply",
      "fullTitle": "create() should throw if newly generated tokens would exceed max supply",
      "timedOut": false,
      "duration": 316,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n        const maxTokens = await instance.MAX_TOKENS.call();\n        const totalSupply = await instance.totalSupply.call();\n        assert.equals(totalSupply, 0);\n        return utils.shouldThrowVmException(\n          instance.create.bind(\n            instance, accounts[2], maxTokens.plus(1)));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "a40900e9-8b13-4daa-8f77-453204fbe5dd",
      "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should increase tokenSupply by given amount",
      "fullTitle": "create() should increase tokenSupply by given amount",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const supply = await instance.totalSupply.call();\n      await instance.create(\n        accounts[1], web3.toWei(500));\n      const newSupply = await instance.totalSupply.call();\n      assert.equal(\n        newSupply.toString(), supply.plus(web3.toWei(500)).toString());",
      "err": {},
      "isRoot": false,
      "uuid": "0bd07de1-5c03-41e5-b363-19f215d3d488",
      "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should increase the balance of given recipient by amount",
      "fullTitle": "create() should increase the balance of given recipient by amount",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n        const balance = await instance.balanceOf.call(accounts[2]);\n        await instance.create(\n          accounts[2], web3.toWei(500));\n        const newBalance = await instance.balanceOf.call(accounts[2]);\n        assert.equal(\n          newBalance.toString(),\n          balance.plus(web3.toWei(500)).toString());",
      "err": {},
      "isRoot": false,
      "uuid": "51097b8a-c266-4873-b604-8873ff1fe42a",
      "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw an error when minting is not active",
      "fullTitle": "create() should throw an error when minting is not active",
      "timedOut": false,
      "duration": 365,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const token = await MoedaToken.new();\n      await token.unlock();\n      const mintingFinished = await token.mintingFinished.call();\n      assert.isTrue(mintingFinished);\n      return utils.shouldThrowVmException(token.create.bind(token,\n        accounts[1], web3.toWei(500)));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "7486fa52-c871-4068-a456-1399b57ab5f1",
      "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should emit a LogCreation event on success",
      "fullTitle": "create() should emit a LogCreation event on success",
      "timedOut": false,
      "duration": 348,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const token = await MoedaToken.new();\n      try {\n        await token.create(\n          accounts[1], web3.toWei(500));\n        const event = await utils.getLatestEvent(\n          token, 'LogCreation');\n        assert.strictEqual(event.donor, accounts[1]);\n        assert.strictEqual(\n          event.tokensReceived.toString(10),\n          web3.toWei(500).toString(10));\n      } catch (error) {\n        fail(`should not have thrown ${error}`);\n      }",
      "err": {},
      "isRoot": false,
      "uuid": "0a6d894a-b8aa-4a41-9945-f44c49c54dcf",
      "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only allow owner to invoke",
      "fullTitle": "unlock() should only allow owner to invoke",
      "timedOut": false,
      "duration": 3,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await utils.shouldThrowVmException(instance.unlock.bind(\n        instance, { from: accounts[1] }));\n      const mintingFinished = await instance.mintingFinished.call();\n      assert.strictEqual(mintingFinished, false);",
      "err": {
        "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "e6c88420-9f65-4ade-9704-71d216400286",
      "parentUUID": "af4d7bd5-8da3-4302-bc99-61fd1c9d7c7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should set mintingFinished to true",
      "fullTitle": "unlock() should set mintingFinished to true",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      await instance.unlock();\n      const mintingFinished = await instance.mintingFinished.call();\n      assert.strictEqual(mintingFinished, true, 'should be unlocked');",
      "err": {},
      "isRoot": false,
      "uuid": "f5cea128-2cd5-4059-9821-f1ad665c331c",
      "parentUUID": "af4d7bd5-8da3-4302-bc99-61fd1c9d7c7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when minting is active",
      "fullTitle": "transfer() should throw when minting is active",
      "timedOut": false,
      "duration": 5,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const mintingFinished = await instance.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      return utils.shouldThrowVmException(\n        instance.transfer.bind(instance,\n          accounts[2], web3.toWei(10), { from: accounts[1] }));",
      "err": {
        "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "ec83409b-003f-41df-a747-d81474f8504e",
      "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if recipient is null address",
      "fullTitle": "transfer() should throw if recipient is null address",
      "timedOut": false,
      "duration": 25,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.create(accounts[1], 100);\n      return utils.shouldThrowVmException(\n        instance.transfer.bind(instance, NULL_ADDRESS, 90, { from: accounts[1] }));",
      "err": {
        "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "e202f9da-d391-48dc-ae1f-b0d23630f9cc",
      "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should not throw when transfers are unlocked",
      "fullTitle": "transfer() should not throw when transfers are unlocked",
      "timedOut": false,
      "duration": 28,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      try {\n        await instance.unlock();\n        const mintingFinished = await instance.mintingFinished.call();\n        assert.isTrue(mintingFinished);\n        const amount = web3.toWei(15);\n        await instance.transfer(\n          accounts[2], amount, { from: accounts[1] });\n        const balance = await instance.balanceOf.call(accounts[1]);\n        assert.strictEqual(web3.fromWei(balance).toNumber(), 1485);\n        const recipientBalance = await instance.balanceOf.call(accounts[2]);\n        assert.strictEqual(\n          recipientBalance.toString(),\n          amount.toString());\n      } catch (error) {\n        fail(error.message);\n      }",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at fail (test/utils.js:104:11)\n    at Context.it (test/moedatoken.js:272:9)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "624b34e8-aa29-4b4c-957b-27230b5393da",
      "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if recipient is null address",
      "fullTitle": "transferFrom() should throw if recipient is null address",
      "timedOut": false,
      "duration": 24,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.create(accounts[1], 100);\n      await instance.approve(accounts[2], 90, { from: accounts[1] });\n      return utils.shouldThrowVmException(\n        instance.transferFrom.bind(\n          instance, accounts[1], NULL_ADDRESS, 90, { from: accounts[2] }));",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "8482a0e5-635f-40f7-bd17-dbd0119da498",
      "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when minting is active",
      "fullTitle": "transferFrom() should throw when minting is active",
      "timedOut": false,
      "duration": 6,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const mintingFinished = await instance.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      await instance.approve(\n        accounts[2], web3.toWei(100), { from: accounts[1] });\n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(web3.fromWei(allowance).toNumber(), 100);\n      return utils.shouldThrowVmException(\n        instance.transferFrom.bind(instance,\n          accounts[1], accounts[2], web3.toWei(50),\n          { from: accounts[2] }));",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "8401dffb-3b42-4e89-9b3a-f0e22dc97221",
      "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should not throw when transfers are unlocked",
      "fullTitle": "transferFrom() should not throw when transfers are unlocked",
      "timedOut": false,
      "duration": 29,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      try {\n        await instance.unlock();\n        const mintingFinished = await instance.mintingFinished.call();\n        assert.isTrue(mintingFinished);\n        await instance.approve(\n          accounts[2], web3.toWei(100), { from: accounts[1] });\n        const allowance = await instance.allowance.call(\n          accounts[1], accounts[2]);\n        assert.strictEqual(web3.fromWei(allowance).toNumber(), 100);\n        await instance.transferFrom(\n          accounts[1],\n          accounts[2],\n          web3.toWei(50),\n          { from: accounts[2] });\n        const balance = await instance.balanceOf.call(accounts[1]);\n        assert.strictEqual(web3.fromWei(balance).toNumber(), 1450);\n        const recipientBalance = await instance.balanceOf.call(accounts[2]);\n        assert.strictEqual(\n          recipientBalance.toString(),\n          web3.toWei(50).toString());\n      } catch (error) {\n        fail(error.message);\n      }",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at fail (test/utils.js:104:11)\n    at Context.it (test/moedatoken.js:332:9)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "430f22b3-cad8-418d-ae6c-8614204f30ff",
      "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return balance of token holder",
      "fullTitle": "balanceOf() should return balance of token holder",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      const balance = await instance.balanceOf.call(accounts[1]);\n      assert.strictEqual(balance.toString(), web3.toWei(15).toString());",
      "err": {},
      "isRoot": false,
      "uuid": "a9256a7c-0c16-4835-b52d-17addc1e71b0",
      "parentUUID": "7043e1de-1a80-441a-bb7c-e28cee3689fd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return zero when sender has no balance",
      "fullTitle": "balanceOf() should return zero when sender has no balance",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const balance = await instance.balanceOf.call(accounts[3]);\n      assert.strictEqual(balance.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "bc080252-191c-4328-b625-25a905961271",
      "parentUUID": "7043e1de-1a80-441a-bb7c-e28cee3689fd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should set a given allowance for a requested spender",
      "fullTitle": "approve() should set a given allowance for a requested spender",
      "timedOut": false,
      "duration": 54,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n        const token = await MoedaToken.new(accounts[0]);\n        await token.create(accounts[1], web3.toWei(15));\n        const amount = web3.toWei(4);\n        await token.approve(\n          accounts[2], amount, { from: accounts[1] });\n        const allowance = await token.allowance.call(\n          accounts[1], accounts[2]);\n        assert.strictEqual(\n          allowance.toString(), amount.toString());",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "6f528f11-0bba-4729-ac1e-49b3e48d0bf6",
      "parentUUID": "3a6fbb38-d5ce-4880-86a5-e311560fe987",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should emit an approval event",
      "fullTitle": "approve() should emit an approval event",
      "timedOut": false,
      "duration": 34,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      const amount = web3.toWei(9);\n      await instance.approve(\n        accounts[3], amount, { from: accounts[1] });\n      const event = await utils.getLatestEvent(instance, 'Approval');\n      assert.strictEqual(event.owner, accounts[1]);\n      assert.strictEqual(event.spender, accounts[3]);\n      assert.strictEqual(event.value.toString(), amount.toString());",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "a803be02-89db-4a95-b3e8-016a1dbc38d1",
      "parentUUID": "3a6fbb38-d5ce-4880-86a5-e311560fe987",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return an allowed transfer amount",
      "fullTitle": "allowance() should return an allowed transfer amount",
      "timedOut": false,
      "duration": 38,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      await instance.approve(\n        accounts[2], web3.toWei(8), { from: accounts[1] });\n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(\n        web3.fromWei(allowance).toNumber(), 8);",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "4b8549a3-07d5-4fd7-8117-396348d40c14",
      "parentUUID": "2bcee5b7-309f-437d-bcd3-9d0b48ae6e28",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return zero if no allowance exists",
      "fullTitle": "allowance() should return zero if no allowance exists",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(\n        web3.fromWei(allowance).toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "d791c278-f67d-4d65-985a-9c273bdf532c",
      "parentUUID": "2bcee5b7-309f-437d-bcd3-9d0b48ae6e28",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if caller is not owner",
      "fullTitle": "createBonusTokens should throw if caller is not owner",
      "timedOut": false,
      "duration": 5,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(\n        instance.createBonusTokens.bind(instance, { from: accounts[1] })))",
      "err": {
        "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "7d5ad6a8-39a5-4258-9f0c-5eaa1046c795",
      "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if already called",
      "fullTitle": "createBonusTokens should throw if already called",
      "timedOut": false,
      "duration": 405,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.createBonusTokens();\n      await utils.shouldThrowVmException(\n        instance.createBonusTokens.bind(instance));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "19cb8e65-d40a-45aa-92ba-8090093abe3a",
      "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should create the right amount of tokens",
      "fullTitle": "createBonusTokens should create the right amount of tokens",
      "timedOut": false,
      "duration": 97,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      await instance.createBonusTokens();\n      return Promise.all(_.map(bonusDonors, async (amount, donor) => {\n        const balance = await instance.balanceOf.call(donor);\n        assert.equals(balance, web3.toBigNumber(amount).mul(bonusTokensPerEth));\n      }));",
      "err": {},
      "isRoot": false,
      "uuid": "b8cc8bbf-e4a0-4256-ba67-72485a1be613",
      "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [
    {
      "title": "should set allocations",
      "fullTitle": "constructor should set allocations",
      "timedOut": false,
      "duration": 0,
      "pass": false,
      "fail": false,
      "pending": true,
      "code": "",
      "err": {},
      "isRoot": false,
      "uuid": "edaa71cc-5bc0-40dc-a5fc-a0b291e5427f",
      "parentUUID": "5f251f48-3222-4307-9c18-483c77f03b16",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPasses": [
    {
      "title": "should set owner to senders address",
      "fullTitle": "constructor should set owner to senders address",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const owner = await instance.owner.call();\n      assert.strictEqual(owner, accounts[0]);",
      "err": {},
      "isRoot": false,
      "uuid": "6f78c6dd-183b-4dbf-893e-9f74a0a25fc0",
      "parentUUID": "5f251f48-3222-4307-9c18-483c77f03b16",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should assign migrationAgent attribute",
      "fullTitle": "setMigrationagent should assign migrationAgent attribute",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      await instance.setMigrationAgent(agent.address);\n      const agentAddress = await instance.migrationAgent.call();\n      assert.strictEqual(agentAddress, agent.address);",
      "err": {},
      "isRoot": false,
      "uuid": "4299ec28-5f7d-4c84-abb8-089538c6eb33",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should destroy old tokens and call migration agent",
      "fullTitle": "migrate should destroy old tokens and call migration agent",
      "timedOut": false,
      "duration": 332,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const agentAddress = await instance.migrationAgent.call();\n      const agent = MockMigrationAgent.at(agentAddress);\n      const amountMigrated = balance - 1;\n      const recipient = accounts[3];\n      await instance.migrate(recipient, amountMigrated, { from: spender });\n      const newBalance = await instance.balanceOf.call(spender);\n      const agentBalance = await agent.balanceOf.call(recipient);\n      const totalSupply = await instance.totalSupply.call();\n      const totalMigrated = await instance.totalMigrated.call();\n      assert.strictEqual(newBalance.toNumber(), 1);\n      assert.strictEqual(agentBalance.toNumber(), amountMigrated);\n      assert.strictEqual(totalSupply.toNumber(), 1);\n      assert.strictEqual(totalMigrated.toNumber(), amountMigrated);\n      const log = await utils.getLatestEvent(instance, 'LogMigration');\n      assert.strictEqual(log.spender, spender);\n      assert.strictEqual(log.grantee, recipient);\n      assert.strictEqual(log.amount.toNumber(), amountMigrated);",
      "err": {},
      "isRoot": false,
      "uuid": "2e559a85-9e42-4bd8-adf8-dc49261526d0",
      "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should reduce total supply and sender balance",
      "fullTitle": "burn should reduce total supply and sender balance",
      "timedOut": false,
      "duration": 329,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const amountToBurn = 45;\n      await token.burn(amountToBurn, { from: accounts[3] });\n      const supply = await token.totalSupply.call();\n      const newBalance = await token.balanceOf.call(accounts[3]);\n      assert.isTrue(supply.eq(balance - amountToBurn));\n      assert.isTrue(newBalance.eq(balance - amountToBurn));\n      const event = await utils.getLatestEvent(token, 'LogDestruction');\n      assert.isTrue(event.amount.eq(amountToBurn));",
      "err": {},
      "isRoot": false,
      "uuid": "1a31e176-c59c-4d5b-a07b-b21d046e72f2",
      "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should increase tokenSupply by given amount",
      "fullTitle": "create() should increase tokenSupply by given amount",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const supply = await instance.totalSupply.call();\n      await instance.create(\n        accounts[1], web3.toWei(500));\n      const newSupply = await instance.totalSupply.call();\n      assert.equal(\n        newSupply.toString(), supply.plus(web3.toWei(500)).toString());",
      "err": {},
      "isRoot": false,
      "uuid": "0bd07de1-5c03-41e5-b363-19f215d3d488",
      "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should increase the balance of given recipient by amount",
      "fullTitle": "create() should increase the balance of given recipient by amount",
      "timedOut": false,
      "duration": 25,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n        const balance = await instance.balanceOf.call(accounts[2]);\n        await instance.create(\n          accounts[2], web3.toWei(500));\n        const newBalance = await instance.balanceOf.call(accounts[2]);\n        assert.equal(\n          newBalance.toString(),\n          balance.plus(web3.toWei(500)).toString());",
      "err": {},
      "isRoot": false,
      "uuid": "51097b8a-c266-4873-b604-8873ff1fe42a",
      "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should emit a LogCreation event on success",
      "fullTitle": "create() should emit a LogCreation event on success",
      "timedOut": false,
      "duration": 348,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const token = await MoedaToken.new();\n      try {\n        await token.create(\n          accounts[1], web3.toWei(500));\n        const event = await utils.getLatestEvent(\n          token, 'LogCreation');\n        assert.strictEqual(event.donor, accounts[1]);\n        assert.strictEqual(\n          event.tokensReceived.toString(10),\n          web3.toWei(500).toString(10));\n      } catch (error) {\n        fail(`should not have thrown ${error}`);\n      }",
      "err": {},
      "isRoot": false,
      "uuid": "0a6d894a-b8aa-4a41-9945-f44c49c54dcf",
      "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should set mintingFinished to true",
      "fullTitle": "unlock() should set mintingFinished to true",
      "timedOut": false,
      "duration": 28,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      await instance.unlock();\n      const mintingFinished = await instance.mintingFinished.call();\n      assert.strictEqual(mintingFinished, true, 'should be unlocked');",
      "err": {},
      "isRoot": false,
      "uuid": "f5cea128-2cd5-4059-9821-f1ad665c331c",
      "parentUUID": "af4d7bd5-8da3-4302-bc99-61fd1c9d7c7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return balance of token holder",
      "fullTitle": "balanceOf() should return balance of token holder",
      "timedOut": false,
      "duration": 30,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      const balance = await instance.balanceOf.call(accounts[1]);\n      assert.strictEqual(balance.toString(), web3.toWei(15).toString());",
      "err": {},
      "isRoot": false,
      "uuid": "a9256a7c-0c16-4835-b52d-17addc1e71b0",
      "parentUUID": "7043e1de-1a80-441a-bb7c-e28cee3689fd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return zero when sender has no balance",
      "fullTitle": "balanceOf() should return zero when sender has no balance",
      "timedOut": false,
      "duration": 3,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const balance = await instance.balanceOf.call(accounts[3]);\n      assert.strictEqual(balance.toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "bc080252-191c-4328-b625-25a905961271",
      "parentUUID": "7043e1de-1a80-441a-bb7c-e28cee3689fd",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return zero if no allowance exists",
      "fullTitle": "allowance() should return zero if no allowance exists",
      "timedOut": false,
      "duration": 9,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(\n        web3.fromWei(allowance).toNumber(), 0);",
      "err": {},
      "isRoot": false,
      "uuid": "d791c278-f67d-4d65-985a-9c273bdf532c",
      "parentUUID": "2bcee5b7-309f-437d-bcd3-9d0b48ae6e28",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should create the right amount of tokens",
      "fullTitle": "createBonusTokens should create the right amount of tokens",
      "timedOut": false,
      "duration": 97,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "async \n      await instance.createBonusTokens();\n      return Promise.all(_.map(bonusDonors, async (amount, donor) => {\n        const balance = await instance.balanceOf.call(donor);\n        assert.equals(balance, web3.toBigNumber(amount).mul(bonusTokensPerEth));\n      }));",
      "err": {},
      "isRoot": false,
      "uuid": "b8cc8bbf-e4a0-4256-ba67-72485a1be613",
      "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [
    {
      "title": "\"before each\" hook for \"should be able to transfer tokens\"",
      "fullTitle": "Contract: Wallet \"before each\" hook for \"should be able to transfer tokens\"",
      "timedOut": false,
      "duration": 35,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n    wallet = await Wallet.new(accounts, 1);\n    token = await MoedaToken.new({ from: accounts[1] });\n    await token.create(wallet.address, web3.toWei(120000), { from: accounts[1] });\n    await token.create(accounts[3], web3.toWei(15000), { from: accounts[1] });\n    return token.unlock({ from: accounts[1] });",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "f7d058a7-1475-4271-a0a3-3588573fb60a",
      "parentUUID": "608a93f4-aa11-4594-8bdc-f3b1998bcde3",
      "isHook": true,
      "skipped": false
    },
    {
      "title": "should throw if minting is active",
      "fullTitle": "setMigrationagent should throw if minting is active",
      "timedOut": false,
      "duration": 377,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const token = await MoedaToken.new();\n      return utils.shouldThrowVmException(\n        token.setMigrationAgent.bind(token, agent.address));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "2538d671-30d4-4726-8277-9c8c7c1370a6",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if sender is not owner",
      "fullTitle": "setMigrationagent should throw if sender is not owner",
      "timedOut": false,
      "duration": 6,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(\n          instance, agent.address, { from: accounts[1] })))",
      "err": {
        "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "c55bb657-32ef-4944-a0e5-220e2e939265",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if argument is null address",
      "fullTitle": "setMigrationagent should throw if argument is null address",
      "timedOut": false,
      "duration": 306,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, NULL_ADDRESS)))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "4e4d52ad-8df1-40a1-ac2a-5a7fbafdfc56",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if argument is not a contract",
      "fullTitle": "setMigrationagent should throw if argument is not a contract",
      "timedOut": false,
      "duration": 336,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, accounts[1])))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "81213c40-b8da-40ea-8d1d-68edef1615b9",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if migrationAgent is already set",
      "fullTitle": "setMigrationagent should throw if migrationAgent is already set",
      "timedOut": false,
      "duration": 378,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.setMigrationAgent(agent.address);\n      return utils.shouldThrowVmException(\n        instance.setMigrationAgent.bind(instance, agent.address));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "aa7b4b72-2680-4fa4-af5d-f93bf559a2dd",
      "parentUUID": "006952b5-45dc-4252-977d-a9466ec17402",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when minting is still active",
      "fullTitle": "migrate should throw when minting is still active",
      "timedOut": false,
      "duration": 361,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const token = await MoedaToken.new();\n      const mintingFinished = await token.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      return utils.shouldThrowVmException(token.migrate.bind(instance, spender, balance));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "7a92a159-b021-41e2-9fe7-987e6eb52d9d",
      "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when beneficiary is null address",
      "fullTitle": "migrate should throw when beneficiary is null address",
      "timedOut": false,
      "duration": 325,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async (\n      utils.shouldThrowVmException(\n        instance.migrate.bind(instance, NULL_ADDRESS, balance)))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "4da18798-199d-48fe-b77c-514ad7ca56c7",
      "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when migrationAgent has not been set",
      "fullTitle": "migrate should throw when migrationAgent has not been set",
      "timedOut": false,
      "duration": 361,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const token = await MoedaToken.new(spender);\n      const agent = await token.migrationAgent.call();\n      assert.strictEqual(agent, NULL_ADDRESS);\n      return utils.shouldThrowVmException(\n        token.migrate.bind(token, spender, balance));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "a6b93ca2-85e9-498c-8df7-abcfa48444e6",
      "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when amount is zero",
      "fullTitle": "migrate should throw when amount is zero",
      "timedOut": false,
      "duration": 305,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async (\n      utils.shouldThrowVmException(\n        instance.migrate.bind(instance, spender, 0)))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "9cb17e47-0c76-4a01-adbb-70694ec0fbde",
      "parentUUID": "0c8364d2-976d-4dbe-b4c2-9e14d6574d5d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when amount is zero",
      "fullTitle": "burn should throw when amount is zero",
      "timedOut": false,
      "duration": 323,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(token.burn.bind(\n        token, 0, { from: accounts[3] })))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "ebb89c6d-9c43-417c-9555-780095701f8d",
      "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when balance is less than amount",
      "fullTitle": "burn should throw when balance is less than amount",
      "timedOut": false,
      "duration": 305,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(\n        token.burn.bind(token, balance + 1, { from: accounts[3] })))",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "b83edbbe-f961-4434-b6a2-6666c786044d",
      "parentUUID": "0e55e801-630c-48df-a3fe-c2a73878ecfb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if newly generated tokens would exceed max supply",
      "fullTitle": "create() should throw if newly generated tokens would exceed max supply",
      "timedOut": false,
      "duration": 316,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n        const maxTokens = await instance.MAX_TOKENS.call();\n        const totalSupply = await instance.totalSupply.call();\n        assert.equals(totalSupply, 0);\n        return utils.shouldThrowVmException(\n          instance.create.bind(\n            instance, accounts[2], maxTokens.plus(1)));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "a40900e9-8b13-4daa-8f77-453204fbe5dd",
      "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw an error when minting is not active",
      "fullTitle": "create() should throw an error when minting is not active",
      "timedOut": false,
      "duration": 365,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const token = await MoedaToken.new();\n      await token.unlock();\n      const mintingFinished = await token.mintingFinished.call();\n      assert.isTrue(mintingFinished);\n      return utils.shouldThrowVmException(token.create.bind(token,\n        accounts[1], web3.toWei(500)));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "7486fa52-c871-4068-a456-1399b57ab5f1",
      "parentUUID": "dc26404c-8c55-464a-a0c7-26d740b75988",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should only allow owner to invoke",
      "fullTitle": "unlock() should only allow owner to invoke",
      "timedOut": false,
      "duration": 3,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await utils.shouldThrowVmException(instance.unlock.bind(\n        instance, { from: accounts[1] }));\n      const mintingFinished = await instance.mintingFinished.call();\n      assert.strictEqual(mintingFinished, false);",
      "err": {
        "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "e6c88420-9f65-4ade-9704-71d216400286",
      "parentUUID": "af4d7bd5-8da3-4302-bc99-61fd1c9d7c7b",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when minting is active",
      "fullTitle": "transfer() should throw when minting is active",
      "timedOut": false,
      "duration": 5,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const mintingFinished = await instance.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      return utils.shouldThrowVmException(\n        instance.transfer.bind(instance,\n          accounts[2], web3.toWei(10), { from: accounts[1] }));",
      "err": {
        "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "ec83409b-003f-41df-a747-d81474f8504e",
      "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if recipient is null address",
      "fullTitle": "transfer() should throw if recipient is null address",
      "timedOut": false,
      "duration": 25,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.create(accounts[1], 100);\n      return utils.shouldThrowVmException(\n        instance.transfer.bind(instance, NULL_ADDRESS, 90, { from: accounts[1] }));",
      "err": {
        "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "e202f9da-d391-48dc-ae1f-b0d23630f9cc",
      "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should not throw when transfers are unlocked",
      "fullTitle": "transfer() should not throw when transfers are unlocked",
      "timedOut": false,
      "duration": 28,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      try {\n        await instance.unlock();\n        const mintingFinished = await instance.mintingFinished.call();\n        assert.isTrue(mintingFinished);\n        const amount = web3.toWei(15);\n        await instance.transfer(\n          accounts[2], amount, { from: accounts[1] });\n        const balance = await instance.balanceOf.call(accounts[1]);\n        assert.strictEqual(web3.fromWei(balance).toNumber(), 1485);\n        const recipientBalance = await instance.balanceOf.call(accounts[2]);\n        assert.strictEqual(\n          recipientBalance.toString(),\n          amount.toString());\n      } catch (error) {\n        fail(error.message);\n      }",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at fail (test/utils.js:104:11)\n    at Context.it (test/moedatoken.js:272:9)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "624b34e8-aa29-4b4c-957b-27230b5393da",
      "parentUUID": "8736eca1-3c9b-4fea-a020-1d27cf4f7798",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if recipient is null address",
      "fullTitle": "transferFrom() should throw if recipient is null address",
      "timedOut": false,
      "duration": 24,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.create(accounts[1], 100);\n      await instance.approve(accounts[2], 90, { from: accounts[1] });\n      return utils.shouldThrowVmException(\n        instance.transferFrom.bind(\n          instance, accounts[1], NULL_ADDRESS, 90, { from: accounts[2] }));",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "8482a0e5-635f-40f7-bd17-dbd0119da498",
      "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw when minting is active",
      "fullTitle": "transferFrom() should throw when minting is active",
      "timedOut": false,
      "duration": 6,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      const mintingFinished = await instance.mintingFinished.call();\n      assert.isFalse(mintingFinished);\n      await instance.approve(\n        accounts[2], web3.toWei(100), { from: accounts[1] });\n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(web3.fromWei(allowance).toNumber(), 100);\n      return utils.shouldThrowVmException(\n        instance.transferFrom.bind(instance,\n          accounts[1], accounts[2], web3.toWei(50),\n          { from: accounts[2] }));",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "8401dffb-3b42-4e89-9b3a-f0e22dc97221",
      "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should not throw when transfers are unlocked",
      "fullTitle": "transferFrom() should not throw when transfers are unlocked",
      "timedOut": false,
      "duration": 29,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      try {\n        await instance.unlock();\n        const mintingFinished = await instance.mintingFinished.call();\n        assert.isTrue(mintingFinished);\n        await instance.approve(\n          accounts[2], web3.toWei(100), { from: accounts[1] });\n        const allowance = await instance.allowance.call(\n          accounts[1], accounts[2]);\n        assert.strictEqual(web3.fromWei(allowance).toNumber(), 100);\n        await instance.transferFrom(\n          accounts[1],\n          accounts[2],\n          web3.toWei(50),\n          { from: accounts[2] });\n        const balance = await instance.balanceOf.call(accounts[1]);\n        assert.strictEqual(web3.fromWei(balance).toNumber(), 1450);\n        const recipientBalance = await instance.balanceOf.call(accounts[2]);\n        assert.strictEqual(\n          recipientBalance.toString(),\n          web3.toWei(50).toString());\n      } catch (error) {\n        fail(error.message);\n      }",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at fail (test/utils.js:104:11)\n    at Context.it (test/moedatoken.js:332:9)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "430f22b3-cad8-418d-ae6c-8614204f30ff",
      "parentUUID": "4f7e733f-89ca-487d-954c-73f47e4ca838",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should set a given allowance for a requested spender",
      "fullTitle": "approve() should set a given allowance for a requested spender",
      "timedOut": false,
      "duration": 54,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n        const token = await MoedaToken.new(accounts[0]);\n        await token.create(accounts[1], web3.toWei(15));\n        const amount = web3.toWei(4);\n        await token.approve(\n          accounts[2], amount, { from: accounts[1] });\n        const allowance = await token.allowance.call(\n          accounts[1], accounts[2]);\n        assert.strictEqual(\n          allowance.toString(), amount.toString());",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "6f528f11-0bba-4729-ac1e-49b3e48d0bf6",
      "parentUUID": "3a6fbb38-d5ce-4880-86a5-e311560fe987",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should emit an approval event",
      "fullTitle": "approve() should emit an approval event",
      "timedOut": false,
      "duration": 34,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      const amount = web3.toWei(9);\n      await instance.approve(\n        accounts[3], amount, { from: accounts[1] });\n      const event = await utils.getLatestEvent(instance, 'Approval');\n      assert.strictEqual(event.owner, accounts[1]);\n      assert.strictEqual(event.spender, accounts[3]);\n      assert.strictEqual(event.value.toString(), amount.toString());",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "a803be02-89db-4a95-b3e8-016a1dbc38d1",
      "parentUUID": "3a6fbb38-d5ce-4880-86a5-e311560fe987",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should return an allowed transfer amount",
      "fullTitle": "allowance() should return an allowed transfer amount",
      "timedOut": false,
      "duration": 38,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.create(accounts[1], web3.toWei(15));\n      await instance.approve(\n        accounts[2], web3.toWei(8), { from: accounts[1] });\n      const allowance = await instance.allowance.call(\n        accounts[1], accounts[2]);\n      assert.strictEqual(\n        web3.fromWei(allowance).toNumber(), 8);",
      "err": {
        "message": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.",
        "estack": "Error: Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.\n    at Object.InvalidResponse (node_modules/truffle-contract/node_modules/web3/lib/web3/errors.js:38:16)\n    at node_modules/truffle-contract/node_modules/web3/lib/web3/requestmanager.js:86:36\n    at node_modules/truffle-config/node_modules/truffle-provider/wrapper.js:134:9\n    at XMLHttpRequest.request.onreadystatechange (node_modules/web3/lib/web3/httpprovider.js:118:13)\n    at XMLHttpRequestEventTarget.dispatchEvent (node_modules/xhr2/lib/xhr2.js:64:18)\n    at XMLHttpRequest._setReadyState (node_modules/xhr2/lib/xhr2.js:354:12)\n    at XMLHttpRequest._onHttpResponseEnd (node_modules/xhr2/lib/xhr2.js:509:12)\n    at IncomingMessage.<anonymous> (node_modules/xhr2/lib/xhr2.js:469:24)"
      },
      "isRoot": false,
      "uuid": "4b8549a3-07d5-4fd7-8117-396348d40c14",
      "parentUUID": "2bcee5b7-309f-437d-bcd3-9d0b48ae6e28",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if caller is not owner",
      "fullTitle": "createBonusTokens should throw if caller is not owner",
      "timedOut": false,
      "duration": 5,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "(\n      utils.shouldThrowVmException(\n        instance.createBonusTokens.bind(instance, { from: accounts[1] })))",
      "err": {
        "message": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Your account is locked. Unlock the account via CLI, personal_unlockAccount or use Trusted Signer.' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "7d5ad6a8-39a5-4258-9f0c-5eaa1046c795",
      "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should throw if already called",
      "fullTitle": "createBonusTokens should throw if already called",
      "timedOut": false,
      "duration": 405,
      "state": "failed",
      "pass": false,
      "fail": true,
      "pending": false,
      "code": "async \n      await instance.createBonusTokens();\n      await utils.shouldThrowVmException(\n        instance.createBonusTokens.bind(instance));",
      "err": {
        "message": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'",
        "estack": "AssertionError: expected 'Invalid JSON RPC response: undefined' to include 'invalid opcode'\n    at Object.shouldThrowVmException (test/utils.js:122:14)\n    at <anonymous>\n    at process._tickCallback (internal/process/next_tick.js:188:7)"
      },
      "isRoot": false,
      "uuid": "19cb8e65-d40a-45aa-92ba-8090093abe3a",
      "parentUUID": "9f7aadec-2750-4741-9bd8-c8007672011a",
      "isHook": false,
      "skipped": false
    }
  ],
  "copyrightYear": 2017
}